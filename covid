# -*- coding: utf-8 -*-
"""
Created on Fri May 24 01:24:31 2024

@author: pc
"""

import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# Load the data from the Excel file
data_path = "D:/PHDS/Data Science Fundamentals/Assignments/Visualization/COVID_worldwide.xlsx"
df = pd.read_excel(data_path)

# Convert date columns to a datetime object
df['dateRep'] = pd.to_datetime(df[['year', 'month', 'day']])

# Set the title of the Streamlit app
st.title("Worldwide COVID-19 Data Dashboard")

# Sidebar filters
st.sidebar.header("Filters")

# Filter continent and update countries based on the continent selection
selected_continent = st.sidebar.multiselect('Select Continent', df['continentExp'].unique())
if selected_continent:
    filtered_countries = df[df['continentExp'].isin(selected_continent)]['countriesAndTerritories'].unique()
    selected_country = st.sidebar.multiselect('Select Country', filtered_countries)
else:
    selected_country = st.sidebar.multiselect('Select Country', df['countriesAndTerritories'].unique())

selected_year = st.sidebar.multiselect('Select Year', df['year'].unique())
if selected_year:
    filtered_months = df[df['year'].isin(selected_year)]['dateRep'].dt.strftime('%b-%Y').unique()
    selected_month = st.sidebar.multiselect('Select Month', filtered_months)
else:
    selected_month = st.sidebar.multiselect('Select Month', df['dateRep'].dt.strftime('%b-%Y').unique())

# Apply filters
if selected_continent:
    df = df[df['continentExp'].isin(selected_continent)]
if selected_country:
    df = df[df['countriesAndTerritories'].isin(selected_country)]
if selected_year:
    df = df[df['year'].isin(selected_year)]
if selected_month:
    df = df[df['dateRep'].dt.strftime('%b-%Y').isin(selected_month)]

# Display the data frame
st.subheader("COVID-19 Data")
st.write(df.head())

# Helper function to format large numbers consistently
def human_format(num, pos=None):
    if num >= 1e6:
        return f'{num*1e-6:.1f}M'
    elif num >= 1e3:
        return f'{num*1e-3:.1f}K'
    else:
        return str(int(num))

# Visualization 1: COVID-19 Cases by Country and Deaths by Country (Side by Side)
st.subheader("COVID-19 Cases and Deaths by Country")

top_countries_cases = df.groupby('countriesAndTerritories')['cases'].sum().sort_values(ascending=False).head(10)
top_countries_deaths = df.groupby('countriesAndTerritories')['deaths'].sum().sort_values(ascending=False).head(10)

fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(16, 6))
top_countries_cases.plot(kind='bar', ax=ax1, color='skyblue')
top_countries_deaths.plot(kind='bar', ax=ax2, color='salmon')

ax1.set_title("Top 10 Countries by COVID-19 Cases")
ax1.set_ylabel("Total Cases")
ax1.set_xlabel("Countries")
ax1.get_yaxis().set_major_formatter(plt.FuncFormatter(human_format))
for p in ax1.patches:
    ax1.annotate(f'{human_format(p.get_height())}', (p.get_x() + p.get_width() / 2., p.get_height()), 
                 ha='center', va='center', xytext=(0, 10), textcoords='offset points')

ax2.set_title("Top 10 Countries by COVID-19 Deaths")
ax2.set_ylabel("Total Deaths")
ax2.set_xlabel("Countries")
ax2.get_yaxis().set_major_formatter(plt.FuncFormatter(human_format))
for p in ax2.patches:
    ax2.annotate(f'{human_format(p.get_height())}', (p.get_x() + p.get_width() / 2., p.get_height()), 
                 ha='center', va='center', xytext=(0, 10), textcoords='offset points')

fig.suptitle("Figure 1: Top 10 Countries by COVID-19 Cases and Deaths", fontsize=16)
st.pyplot(fig)

# Visualization 2: COVID-19 Cases by Continent and Deaths by Continent (Horizontal Bar Graphs)
st.subheader("COVID-19 Cases and Deaths by Continent")

continent_cases = df.groupby('continentExp')['cases'].sum().sort_values(ascending=False)
continent_deaths = df.groupby('continentExp')['deaths'].sum().sort_values(ascending=False)

fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(16, 6))
continent_cases.plot(kind='barh', ax=ax1, color='green')
continent_deaths.plot(kind='barh', ax=ax2, color='red')

ax1.set_title("COVID-19 Cases by Continent")
ax1.set_xlabel("Total Cases")
ax1.set_ylabel("Continents")
ax1.get_xaxis().set_major_formatter(plt.FuncFormatter(human_format))
for p in ax1.patches:
    ax1.annotate(f'{human_format(p.get_width())}', (p.get_width(), p.get_y() + p.get_height() / 2.), 
                 ha='center', va='center', xytext=(10, 0), textcoords='offset points')

ax2.set_title("COVID-19 Deaths by Continent")
ax2.set_xlabel("Total Deaths")
ax2.set_ylabel("Continents")
ax2.get_xaxis().set_major_formatter(plt.FuncFormatter(human_format))
for p in ax2.patches:
    ax2.annotate(f'{human_format(p.get_width())}', (p.get_width(), p.get_y() + p.get_height() / 2.), 
                 ha='center', va='center', xytext=(10, 0), textcoords='offset points')

fig.suptitle("Figure 2: COVID-19 Cases and Deaths by Continent", fontsize=16)
st.pyplot(fig)

# Visualization 3: Weekly Statistics
st.subheader("Weekly COVID-19 Cases")
df['week'] = df['dateRep'].dt.isocalendar().week
weekly_cases = df.groupby('week')['cases'].sum()
fig, ax = plt.subplots(figsize=(10, 6))
weekly_cases.plot(ax=ax, color='blue')
ax.set_title("Weekly COVID-19 Cases")
ax.set_ylabel("Total Cases")
ax.set_xlabel("Week Number")
ax.get_yaxis().set_major_formatter(plt.FuncFormatter(human_format))
fig.suptitle("Figure 3: Weekly COVID-19 Cases", fontsize=16)
# Remove value labels from this graph
st.pyplot(fig)

# Visualization 4: Rate of Increase
st.subheader("Rate of Increase of COVID-19 Cases")
df_sorted = df.sort_values(by='dateRep')
df_sorted['cumulative_cases'] = df_sorted.groupby('countriesAndTerritories')['cases'].cumsum()
df_sorted['rate_of_increase'] = df_sorted['cumulative_cases'].pct_change().fillna(0)
fig, ax = plt.subplots(figsize=(10, 6))
df_sorted.groupby('dateRep')['rate_of_increase'].mean().plot(ax=ax, color='red')
ax.set_title("Average Rate of Increase of COVID-19 Cases")
ax.set_ylabel("Rate of Increase")
ax.set_xlabel("Date")
fig.suptitle("Figure 4: Average Rate of Increase of COVID-19 Cases", fontsize=16)
st.pyplot(fig)

# Visualization 5: Cases and Deaths per 100,000 Population
st.subheader("COVID-19 Cases and Deaths per 100,000 Population")
df['cases_per_100k'] = df['cases'] * 100000 / df['popData2019']
df['deaths_per_100k'] = df['deaths'] * 100000 / df['popData2019']

fig, ax = plt.subplots(figsize=(10, 6))
df.groupby('dateRep')['cases_per_100k'].mean().plot(ax=ax, label='Cases', color='purple')
df.groupby('dateRep')['deaths_per_100k'].mean().plot(ax=ax, label='Deaths', color='orange')
ax.set_title("COVID-19 Cases and Deaths per 100,000 Population")
ax.set_ylabel("Rate per 100,000")
ax.set_xlabel("Date")
ax.legend()
fig.suptitle("Figure 5: COVID-19 Cases and Deaths per 100,000 Population", fontsize=16)
st.pyplot(fig)

# Visualization 6: Stacked Bar Graph (Cases per 100k and Deaths per 100k) by Country
st.subheader("COVID-19 Cases and Deaths per 100,000 Population by Country")

fig, ax = plt.subplots(figsize=(10, 6))
df_country = df.groupby('countriesAndTerritories')[['cases_per_100k', 'deaths_per_100k']].sum().sort_values(by='cases_per_100k', ascending=False).head(10)
df_country.plot(kind='bar', stacked=True, ax=ax)
ax.set_title("Top 10 Countries by COVID-19 Cases and Deaths per 100,000 Population")
ax.set_ylabel("Rate per 100,000")
ax.set_xlabel("Countries")
ax.legend(['Cases per 100k', 'Deaths per 100k'])
for p in ax.patches:
    ax.annotate(f'{human_format(p.get_height())}', (p.get_x() + p.get_width() / 2., p.get_height()), 
                ha='center', va='center', xytext=(0, 10), textcoords='offset points')
fig.suptitle("Figure 6: Top 10 Countries by COVID-19 Cases and Deaths per 100,000 Population", fontsize=16)
st.pyplot(fig)

# Visualization 7: COVID-19 Cases and Deaths per 100,000 Population by Continent
fig, ax = plt.subplots(figsize=(10, 6))
df_continent = df.groupby('continentExp')[['cases_per_100k', 'deaths_per_100k']].sum().sort_values(by='cases_per_100k', ascending=False)
df_continent.plot(kind='bar', ax=ax)
ax.set_title("COVID-19 Cases and Deaths per 100,000 Population by Continent")
ax.set_ylabel("Rate per 100,000")
ax.set_xlabel("Continents")
ax.legend(['Cases', 'Deaths'])
for p in ax.patches:
    ax.annotate(f'{human_format(p.get_height())}', (p.get_x() + p.get_width() / 2., p.get_height()), 
                ha='center', va='center', xytext=(0, 10), textcoords='offset points')
fig.suptitle("Figure 7: COVID-19 Cases and Deaths per 100,000 Population by Continent", fontsize=16)
st.pyplot(fig)

# Visualization 8: Monthly COVID-19 Cases and Deaths per 100,000 Population (Line Graph)
st.subheader("Monthly COVID-19 Cases and Deaths per 100,000 Population")

fig, ax = plt.subplots(figsize=(10, 6))
df['month'] = df['dateRep'].dt.to_period('M')
df_month = df.groupby('month')[['cases_per_100k', 'deaths_per_100k']].sum()
df_month.index = df_month.index.to_timestamp()
df_month.plot(ax=ax)
ax.set_title("Monthly COVID-19 Cases and Deaths per 100,000 Population")
ax.set_ylabel("Rate per 100,000")
ax.set_xlabel("Month")
ax.legend(['Cases', 'Deaths'])
ax.set_xticklabels([label.strftime('%b %Y') for label in df_month.index])
for p in ax.patches:
    ax.annotate(f'{human_format(p.get_height())}', (p.get_x() + p.get_width() / 2., p.get_height()), 
                ha='center', va='center', xytext=(0, 10), textcoords='offset points')
fig.suptitle("Figure 8: Monthly COVID-19 Cases and Deaths per 100,000 Population", fontsize=16)
st.pyplot(fig)

# Visualization 9: Case Fatality Rate by Country side by side with Number of Deaths by Country
st.subheader("Case Fatality Rate and Deaths by Country")

# Calculating the Case Fatality Rate
df['case_fatality_rate'] = df['deaths'] / df['cases'] * 100
top_countries_cfr = df.groupby('countriesAndTerritories')['case_fatality_rate'].mean().sort_values(ascending=False).head(10)

fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(16, 6))
top_countries_cfr.plot(kind='bar', ax=ax1, color='darkred')
top_countries_deaths.plot(kind='bar', ax=ax2, color='salmon')

# Adjust the y-axis range for the Case Fatality Rate graph
ax1.set_ylim(0, 100)
ax1.set_title("Top 10 Countries by Case Fatality Rate")
ax1.set_ylabel("Case Fatality Rate (%)")
ax1.set_xlabel("Countries")
for p in ax1.patches:
    ax1.annotate(f'{p.get_height():.1f}%', (p.get_x() + p.get_width() / 2., p.get_height()), 
                 ha='center', va='center', xytext=(0, 10), textcoords='offset points')

ax2.set_title("Top 10 Countries by COVID-19 Deaths")
ax2.set_ylabel("Total Deaths")
ax2.set_xlabel("Countries")
ax2.get_yaxis().set_major_formatter(plt.FuncFormatter(human_format))
for p in ax2.patches:
    ax2.annotate(f'{human_format(p.get_height())}', (p.get_x() + p.get_width() / 2., p.get_height()), 
                 ha='center', va='center', xytext=(0, 10), textcoords='offset points')

fig.suptitle("Figure 9: Top 10 Countries by Case Fatality Rate and COVID-19 Deaths", fontsize=16)
st.pyplot(fig)
